// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String   @id @default(cuid())
  name        String
  address     String
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  academicYears AcademicYear[]
  students      Student[]
  teachers      Teacher[]
  parents       Parent[]

  @@map("schools")
}

model AcademicYear {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  schoolId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school      School @relation(fields: [schoolId], references: [id])
  grades      Grade[]
  enrollments StudentEnrollment[]

  @@map("academic_years")
}

model Grade {
  id            String   @id @default(cuid())
  name          String
  level         Int
  academicYearId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  classes      Class[]
  students     Student[]

  @@map("grades")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  gradeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  grade       Grade @relation(fields: [gradeId], references: [id])
  students    Student[]
  timetables  Timetable[]

  @@map("classes")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  credits     Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacherSubjects TeacherSubject[]
  timetables      Timetable[]
  assessments     Assessment[]

  @@map("subjects")
}

model Student {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  dateOfBirth DateTime?
  gradeId   String
  classId   String?
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School @relation(fields: [schoolId], references: [id])
  grade       Grade @relation(fields: [gradeId], references: [id])
  class       Class? @relation(fields: [classId], references: [id])
  enrollments StudentEnrollment[]
  parents     StudentParent[]
  attendances Attendance[]
  assessments Assessment[]

  @@map("students")
}

model Teacher {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  subject   String?
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school         School @relation(fields: [schoolId], references: [id])
  teacherSubjects TeacherSubject[]
  timetables     Timetable[]

  @@map("teachers")
}

model Parent {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  phone     String?
  address   String?
  schoolId  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school  School @relation(fields: [schoolId], references: [id])
  students StudentParent[]

  @@map("parents")
}

model StudentParent {
  id        String   @id @default(cuid())
  studentId String
  parentId  String
  relation  String   @default("parent")
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
  parent  Parent  @relation(fields: [parentId], references: [id])

  @@unique([studentId, parentId])
  @@map("student_parents")
}

model StudentEnrollment {
  id            String   @id @default(cuid())
  studentId     String
  academicYearId String
  status        String   @default("active")
  enrolledAt    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  student     Student     @relation(fields: [studentId], references: [id])
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])

  @@unique([studentId, academicYearId])
  @@map("student_enrollments")
}

model TeacherSubject {
  id        String   @id @default(cuid())
  teacherId String
  subjectId String
  createdAt DateTime @default(now())

  teacher Teacher @relation(fields: [teacherId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  @@unique([teacherId, subjectId])
  @@map("teacher_subjects")
}

model Timetable {
  id        String   @id @default(cuid())
  day       String
  startTime String
  endTime   String
  room      String?
  subjectId String
  teacherId String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  @@map("timetables")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  date      DateTime
  status    String   // present, absent, late, excused
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@map("attendance")
}

model Assessment {
  id        String   @id @default(cuid())
  name      String
  type      String   // quiz, test, exam, assignment
  maxMarks  Int
  date      DateTime
  subjectId String
  studentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject Subject @relation(fields: [subjectId], references: [id])
  student Student @relation(fields: [studentId], references: [id])
  grades  GradeRecord[]

  @@map("assessments")
}

model GradeRecord {
  id           String   @id @default(cuid())
  assessmentId String
  marks        Int
  grade        String?
  remarks      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assessment Assessment @relation(fields: [assessmentId], references: [id])

  @@map("grade_records")
}
